import 'package:Assignment3/controller/firebasecontroller.dart';
import 'package:Assignment3/model/comment.dart';
import 'package:Assignment3/model/constant.dart';
import 'package:Assignment3/model/photomemo.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';

import 'myview/mydialog.dart';
import 'myview/myimage.dart';

class AddCommentScreen extends StatefulWidget {
  static const routeName = '/addCommentScreen';
  @override
  State<StatefulWidget> createState() {
    return _AddCommentState();
  }
}

class _AddCommentState extends State<AddCommentScreen> {
  _Controller con;
  // List<Comment> comments;
  User user;
  PhotoMemo onePhotoMemo;
  PhotoMemo onePhotoMemoTemp;
  GlobalKey<FormState> formKey = GlobalKey<FormState>();
  String progressMessage;

  @override
  void initState() {
    super.initState();
    con = _Controller(this);
  }

  void render(fn) => setState(fn);

  @override
  Widget build(BuildContext context) {
    Map args = ModalRoute.of(context).settings.arguments;
    // comments ??= args[Constant.ARG_COMMENTS];
    user ??= args[Constant.ARG_USER];
    onePhotoMemo ??= args[Constant.ARG_ONE_PHOTOMEMO];
    onePhotoMemoTemp ??= PhotoMemo.clone(onePhotoMemo);
    return Scaffold(
      appBar: AppBar(
        title: Text("Add Comment Screen"),
        actions: [
          IconButton(icon: Icon(Icons.check), onPressed: con.save),
        ],
      ),
      body: Form(
        key: formKey,
        child: SingleChildScrollView(
          child: Column(
            children: [
              Container(
                height: MediaQuery.of(context).size.height * 0.4,
                child: MyImage.network(
                  url: onePhotoMemoTemp.photoURL,
                  context: context,
                ),
              ),
              SizedBox(
                height: 1.0,
              ),
              TextFormField(
                enabled: true,
                style: Theme.of(context).textTheme.headline6,
                decoration: InputDecoration(
                  hintText: "Enter Comment",
                ),
                autocorrect: true,
                maxLines: 8,
                validator: con.validateComment,
                onSaved: con.saveComment,
              ),
              Constant.DEV
                  ? Text(
                      'Image Labels generated by ML',
                      style: Theme.of(context).textTheme.bodyText1,
                    )
                  : SizedBox(
                      height: 1.0,
                    ),
              Constant.DEV
                  ? Text(
                      onePhotoMemoTemp.imageLabels.join(' | '),
                    )
                  : SizedBox(
                      height: 1.0,
                    ),
            ],
          ),
        ),
      ),
    );
  }
}

class _Controller {
  _AddCommentState state;
  _Controller(this.state);
  Comment tempComment = Comment(); // build a new comment and add it somehow

  String validateComment(String value) {
    if (value.length > 2) {
      return null;
    } else {
      return "Too Short";
    }
  }

  void saveComment(String value) {
    tempComment.comment = value;
  }

  void save() async {
    if (!state.formKey.currentState.validate()) return;
    state.formKey.currentState.save();

    MyDialog.circularProgressStart(state.context);
    tempComment.userProfilePic = state.user.photoURL;
    tempComment.commentBy = state.user.email;
    tempComment.commentDocId = state.onePhotoMemo.photoURL;
    tempComment.timestamp = DateTime.now();
    MyDialog.circularProgressStart(state.context);

    try {
      // String commentId =
      var docId = await FirebaseController.addComment(tempComment);
      Map<String, dynamic> update = {};
      update[Comment.DOC_ID] = docId;
      await FirebaseController.updateComment(docId, update);
      // tempComment.photoCommentId = commentId;
      // state.comments.insert(0, tempComment);
      MyDialog.circularProgressStop(state.context);
      Navigator.pop(state.context); // return to user shared with screen
      Navigator.pop(state.context); // return to user shared with screen
    } catch (e) {
      MyDialog.info(
        context: state.context,
        title: "Add Comment Error",
        content: '$e',
      );
    }
  }
}
